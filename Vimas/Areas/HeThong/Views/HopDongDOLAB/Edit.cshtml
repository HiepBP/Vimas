@model HopDongDOLABEditViewModel

@{
    Layout = null;
}

<style>
    .select2 {
        width: 100% !important;
    }
</style>

<div class="modal-dialog modal-lg">
    <div class="modal-content">
        <form id="HopDongDOLABForm" method="post">
            @Html.AntiForgeryToken()
            @Html.HiddenFor(q => q.Id)
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                <h4 class="modal-title">Sửa QTHT</h4>
            </div>
            <div class="modal-body">
                <div class="form-horizontal">
                    <div class="form-group">
                        @Html.LabelFor(q => q.NgayDangKy, new { @class = "control-label col-md-4" })
                        <div class="col-md-5">
                            <div class="fg-line">
                                <input class="form-control default-cursor" id="NgayDangKy" type="text" value="" readonly style="background-color:white" />
                                <input type="hidden" name="NgayDangKy" value="@this.Model.NgayDangKy" />
                            </div>
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(q => q.NgayNhan, new { @class = "control-label col-md-4" })
                        <div class="col-md-5">
                            <div class="fg-line">
                                <input class="form-control default-cursor" id="NgayNhan" type="text" value="" readonly style="background-color:white" />
                                <input type="hidden" name="NgayNhan" value="@this.Model.NgayNhan" />
                            </div>
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(q => q.SoDKHopDong, new { @class = "control-label col-md-4" })
                        <div class="col-md-5">
                            @Html.TextBoxFor(q => q.SoDKHopDong, new { @class = " form-control col-sm-12" })
                            @Html.ValidationMessageFor(q => q.SoDKHopDong)
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(q => q.SoCongVan, new { @class = "control-label col-md-4" })
                        <div class="col-md-5">
                            @Html.TextBoxFor(q => q.SoCongVan, new { @class = " form-control col-sm-12" })
                            @Html.ValidationMessageFor(q => q.SoCongVan)
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(q => q.SoPhieuTiepNhan, new { @class = "control-label col-md-4" })
                        <div class="col-md-5">
                            @Html.TextBoxFor(q => q.SoPhieuTiepNhan, new { @class = " form-control col-sm-12" })
                            @Html.ValidationMessageFor(q => q.SoPhieuTiepNhan)
                        </div>
                    </div>
                    <div class="form-group">
                        <label class="control-label col-md-4" for="Price">Thông tin cá nhân</label>
                        <div class="col-md-5">
                            <select id="thongTinCaNhanDDL" class="form-control"></select>
                        </div>
                        <div class="col-sm-2">
                            <button type="button" class="btn btn-success btn-sm" id="addTTCN">
                                <i class="glyphicon glyphicon-plus-sign"></i>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-sm-10 col-sm-offset-1">
                <br />
                <table id="selectedTTCNTable" class="table table-striped table-bordered table-hover">
                    <thead>
                        <tr>
                            <th>STT</th>
                            <th>Họ tên</th>
                            <th>Tùy chọn</th>
                        </tr>
                    </thead>
                    <tbody></tbody>
                </table>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">Đóng</button>
                <input type="button" id="btnSubmit" onclick="editDOLAB()" value="Lưu" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<script>
    $(document).ready(function () {
        var form = $('#HopDongDOLABForm')
            .removeData("validator") /* added by the raw jquery.validate plugin */
            .removeData("unobtrusiveValidation");  /* added by the jquery unobtrusive plugin */

        $.validator.unobtrusive.parse(form);

        selectedTTCNTable();
        initializeDateRangePicker();
        initializeDDL();
    });

    function selectedTTCNTable(){
        console.log('Initialize datatable')
        $('#selectedTTCNTable').dataTable({
            "dom": '',
            "oLanguage": {
                "sSearch": "Số đăng kí:",
                "sZeroRecords": "Không có dữ liệu phù hợp",
                "sInfo": "Hiển thị từ _START_ đến _END_ trên tổng số _TOTAL_ dòng",
                "sEmptyTable": "Không có dữ liệu",
                "sInfoFiltered": " - lọc ra từ _MAX_ dòng",
                "sLengthMenu": "Hiển thị _MENU_ dòng",
                "sProcessing": "Đang xử lý...",
                "oPaginate": {
                    "sNext": "<i class='fa fa-chevron-right'></i>",
                    "sPrevious": "<i class='fa fa-chevron-left'></i>"
                }
            },
            "sAjaxSource": "@Url.Action("GetByIdDOLAB","ThongTinCaNhan", new { area = "HocVien" })",
            "fnServerParams": function (aoData) {
                aoData.push({ "name": "idDOLAB", "value": @this.Model.Id });
            },
            "aoColumnDefs": [
               {
                   "aTargets": [0],
                   "sClass": "text-center"
               },
            ],
            "columns": [
                { "data": "No", "bSortable": false },
                { "data": "HoTen", "bSortable": false },
                { "data": function(o){
                    return "<div  style='text-align:center'><button type='button' class='btn btn-danger btn-sm glyphicon glyphicon-trash' onclick=confirmRemoving(" + o.Id + ")"
                        + "></button></div>";
                }, "bSortable": false
                }
            ],
        });
    }

    function editDOLAB() {
        //var formData = $('#createProductItemForm').serialize();
        var formData = new FormData($('#HopDongDOLABForm')[0]);
        //for (var i = 0; i < ttcnList.length; i++)
        //    formData.append("SelectedThongTinCaNhan[]", ttcnList[i])
        $.ajax({
            url: "@this.Url.Action("Edit","HopDongDOLAB")",
            type: "POST",
            data: formData,
            processData: false,
            contentType: false,
            success: function (result) {
                swal("Chỉnh sửa", result.message, "success");
                $('#editDOLABPanel').modal('hide');
                $('#editDOLABPanel').html("");
                RefreshTable('DOLABDatatable');
            },
            error: function (error) {
                swal('Lỗi', error.message, 'error');
            }
        });
    };

    function initializeDateRangePicker() {
        moment.locale('vi');
        var now = moment().format("LL");
        $('input[name="NgayDangKy"]').val('@this.Model.NgayDangKy.GetValueOrDefault().ToShortDateString()')
        $('#NgayDangKy').val(moment('@this.Model.NgayDangKy.GetValueOrDefault().ToShortDateString()', 'DD/MM/YYYY').format('LL'));
        $('#NgayDangKy').daterangepicker({
            singleDatePicker: true,
            showDropdowns: true,
            autoUpdateInput: false,
            minDate: moment().add(-50, 'y'),
            maxDate: moment().add(10, 'y'),
            locale: {
                format: "LL",
                daysOfWeek: [
                    "Chủ Nhật",
                    "Thứ 2",
                    "Thứ 3",
                    "Thứ 4",
                    "Thứ 5",
                    "Thứ 6",
                    "Thứ 7"
                ],
                monthNames: [
                    "Tháng 1",
                    "Tháng 2",
                    "Tháng 3",
                    "Tháng 4",
                    "Tháng 5",
                    "Tháng 6",
                    "Tháng 7",
                    "Tháng 8",
                    "Tháng 9",
                    "Tháng 10",
                    "Tháng 11",
                    "Tháng 12"
                ],
                firstDay: 1,
            }
        },
        function (start, end, label) {
            $('#NgayDangKy').val(start.format('LL'));
            $('input[name="NgayDangKy"]').val(start.format("DD/MM/YYYY"));
        });

        $('input[name="NgayNhan"]').val('@this.Model.NgayNhan.GetValueOrDefault().ToShortDateString()')
        $('#NgayNhan').val(moment('@this.Model.NgayNhan.GetValueOrDefault().ToShortDateString()', 'DD/MM/YYYY').format('LL'));
        $('#NgayNhan').daterangepicker({
            singleDatePicker: true,
            showDropdowns: true,
            autoUpdateInput: false,
            minDate: moment().add(-50, 'y'),
            maxDate: moment().add(10, 'y'),
            locale: {
                format: "LL",
                daysOfWeek: [
                    "Chủ Nhật",
                    "Thứ 2",
                    "Thứ 3",
                    "Thứ 4",
                    "Thứ 5",
                    "Thứ 6",
                    "Thứ 7"
                ],
                monthNames: [
                    "Tháng 1",
                    "Tháng 2",
                    "Tháng 3",
                    "Tháng 4",
                    "Tháng 5",
                    "Tháng 6",
                    "Tháng 7",
                    "Tháng 8",
                    "Tháng 9",
                    "Tháng 10",
                    "Tháng 11",
                    "Tháng 12"
                ],
                firstDay: 1,
            }
        },
        function (start, end, label) {
            $('#NgayNhan').val(start.format('LL'));
            $('input[name="NgayNhan"]').val(start.format("DD/MM/YYYY"));
        });
    };

    function initializeDDL() {
        var pageSize = 20;
        var optionListUrl = '@Url.Action("LoadThongTinCaNhanDDL","ThongTinCaNhan", new { area = "HocVien"})';
        $('#thongTinCaNhanDDL').select2(
            {
                ajax: {
                    delay: 150,
                    url: optionListUrl,
                    dataType: 'json',
                    delay: 500,
                    data: function (params) {
                        params.page = params.page || 1;
                        return {
                            searchTerm: params.term,
                            pageSize: pageSize,
                            pageNumber: params.page
                        };
                    },
                    processResults: function (data, params) {
                        params.page = params.page || 1;
                        return {
                            results: data.Results,
                            pagination: {
                                more: (params.page * pageSize) < data.Total
                            }
                        };
                    }
                },
                placeholder: "-- Lựa chọn --",
                minimumInputLength: 0,
                allowClear: true,
            });
    }

    function confirmRemoving(idMapping) {

        $.ajax({
            url: '@Url.Action("DeleteHocVien", "HopDongDOLAB")',
            type: 'POST',
            data: {
                'id' : idMapping,
            },
            dataType: 'json',
            success: function (result) {
                if (result.success) {
                    swal("Xoá", result.message, "success");
                    RefreshTable('selectedTTCNTable');
                } else {
                    swal('Lỗi', error.message, 'error');
                }
            },
            error: function (result) {
                swal('Lỗi', error.message, 'error');
            }
        })
    }

    $('#addTTCN').on('click',function(){
        var option = $('#thongTinCaNhanDDL option:selected')[0];
        if (option != null) {
            console.log(option.value);
            var idThongTinCaNhan = option.value;
            $.ajax({
                url: '@Url.Action("AddHocVien","HopDongDOLAB")',
                type: 'POST',
                data: {
                    'IdHopDongDOLAB': @this.Model.Id,
                    'IdThongTinCaNhan': idThongTinCaNhan,
                },
                dataType: 'json',
                success: function (result) {
                    if (result.success) {
                        swal("Thêm mới", result.message, "success");
                        RefreshTable('selectedTTCNTable');
                    } else {
                        swal('Lỗi', error.message, 'error');
                    }
                },
                error: function (result) {
                    swal('Lỗi', error.message, 'error');
                }
            });
        }

    });
</script>